;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname fsm) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require rackunit)
(require "extras.rkt")
(check-location "02" "fsm.rkt")

;; DATA DEFINITION:
;; a State (MachineState) is one of
;; -- "start"
;; -- "q|x"
;; -- "u" 
;; -- "a|b"
;; -- "d|e|f"
;; -- "es"

;; Interp:
;; 
;; "start", "q|x", "u" , "a|b", "d|e|f", "es" are the six states of a finite machine for the regualar expression (q | x)* u* (a | b)* d (e | f)*
;; "start" is the 
;; "u" is the state when the MachineInput is either "q" or "x". On recipt of string "u", it jumps to state "u" else it jumps to error state.
;; "u" is the state when the MachineInput is either "u". On recipt of string "a" or "b", it jumps to state "a|b" else it jumps to error state.
;; "a|b" is the state when the MachineInput is either "a" or "b". On recipt of string "d", it jumps to state "d" else it jumps to error state.
;; "d" is the state when the MachineInput is either "d". On recipt of string "e|f", it jumps to state "e|f" else it jumps to error state. 
;; "d|e|f" is the state when the MachineInput is either "e" or "f" or "d". This is the final state On recipt of any other string the machine terminates.
;; "es" is the error state. An invalid input to any states leads to error state
;; Any of these states can be initial state.

;; TEMPLATE
;; ms-fn : ms -> ??
;(define (ms-fn MachineState)
;  (cond
;    [(string=? ms "start")    
;     ...]
;    [(string=? ms "q|x")    
;     ...]
;    [(string=? ms "u")
;     ...]
;    [(string=? ms "a|b")  
;     ...]
;    [(string=? ms "d|e|f")
;     ...]))


;; next-state : ms MachineInput -> ms
;; GIVEN: a machine state and a single length string
;; RETURNS: the machinestate that follows the given state
;; (next-state "q|x" "y") = "u"
;; (next-state "u" "a") = "a|b"
;; (next-state "a|b" "d") = "d|e|f"
;; (next-state "d" "e") = "d|e|f"
;; STRATEGY: structural decomposition [MachineState]

(define (next-state ms MachineInput)
  (cond
 
    [(or (string=? ms "q|x") (string=? ms "start"))    
     (if (or (string=? MachineInput "q") (string=? MachineInput "x")) "q|x"
             (if(string=? MachineInput "u") "u" (if (or (string=? MachineInput "a") (string=? MachineInput "b")) "a|b"  (if(string=? MachineInput "d") "d|e|f" "es"))))]
    
    [(string=? ms "u")
      (if (string=? MachineInput "u") "u"
             (if (or (string=? MachineInput "a") (string=? MachineInput "b")) "a|b"  (if(string=? MachineInput "d") "d|e|f" "es")))]

    [(string=? ms "a|b")  
     (if (or (string=? MachineInput "a") (string=? MachineInput "b")) "a|b"
             (if(string=? MachineInput "d") "d|e|f" "es"))]

    [(string=? ms "d|e|f")
      (if (string=? MachineInput "d") "es"
             (if (or (string=? MachineInput "e") (string=? MachineInput "f")) "d|e|f" "es"))]))



;initial-state : Number -> State
;GIVEN   : a number
;RETURNS : a representation of the initial state
;EXAMPLE : (initial-state 2)
;Interp  : It returns the state of your machine.  The given number is ignored.
;STRATEGY: cases on machine states
(define (initial-state ipnumber)

  (cond
    [(= ipnumber 0) "start"]
    [(= ipnumber 1) "q|x"]
    [(= ipnumber 2) "u"]
    [(= ipnumber 3) "a|b"]
    [(= ipnumber 4) "d|e|f"]
    
    )
  )


;accepting-state? : State -> Boolean
;GIVEN: a state of the machine
;RETURNS: true iff the given state is a final (accepting) state
;EXAMPLES: (accepting-state? "u") -> false
;(accepting-state? "d|e|f") -> true
(define (accepting-state? state)

  (if(string=? state "d|e|f") true false))


;error-state : State -> Boolean
;GIVEN: a state of the machine
;RETURNS: true iff there is no path (empty or non-empty) from the given
;EXAMPLES: (error-state "es") -> true
;(error-state "u") -> false
;state to an accepting state
(define (error-state? state)

  (cond
    [(string=? state "d|e|f") true]
    [else false]))

(begin-for-test
  (check-equal? (accepting-state? (next-state "q|x" "q")) true
    "Not an accepting state. ")

   (check-equal? (error-state? (next-state "u" "e")) true
    "It is an error state. ")

 )


