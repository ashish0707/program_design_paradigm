;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname draft-06) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; dimensions of the canvas
(define CANVAS-WIDTH 500)
(define INITIAL-VEL 0)
(define INITIAL-MOUSE-X -1)
(define INITIAL-MOUSE-Y -1)
(define CANVAS-HEIGHT 400)
(define TEXT_HEIGHT 10)
(define CIRCLE-RADIUS 20)
(define SIMLPE-CIRCLE (circle CIRCLE-RADIUS "outline" "green"))
(define SELECTED-CIRCLE (circle CIRCLE-RADIUS "solid" "green"))
(define SQUARE-RADIUS 20)
(define EMPTY-CANVAS (empty-scene CANVAS-WIDTH CANVAS-HEIGHT))
(define SIMPLE-SQUARE (square SQUARE-RADIUS "outline" "green"))
(define SELECTED-CIRCLE (circle CIRCLE-RADIUS "solid" "green"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(define-struct leaf  (shape position selected? parent))
;; A leaf is a (make-leaf Boolean Posn Boolean Tree)

(define-struct node (shape position selected? lson rson parent))
;; A leaf is a (make-node Boolean Posn Boolean Tree Tree Tree)

;; A Tree is either
;; -- empty
;; -- (make-node Boolean Posn Boolean Tree Tree Tree) 

;; Template: ******************************************TBD**********
;; tree-fn : Tree -> ???
;; (define (tree-fn t)
;;   (cond
;;     [(leaf? t) (... (leaf-datum t))]
;;     [else (...
;;             (tree-fn (node-lson t))
;;             (tree-fn (node-rson t)))]))

(define-struct world (listOfTree))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; DEFINITIONS FOR KEY EVENTS
(define delete-node-event "d")
(define new-cicle-key-event "c")
(define new-square-key-event "s")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




;initial-world : Any -> World
;GIVEN: any value
;RETURNS: an initial world.  The given value is ignored.
(define (initial-world any)
  (make-world empty))

;run :  Any -> World
;GIVEN: any value
;EFFECT: runs a copy of an initial world
;RETURNS: the final state of the world.  The given value is ignored.
;

;world-after-mouse-event : World Integer Integer MouseEvent -> World
;GIVEN: a World, a location, and a MouseEvent
;RETURNS: the state of the world as it should be following the
;given mouse event at that location.
;

;; world-after-key-event : World KeyEvent -> World
;; GIVEN: a world w
;; RETURNS: the world that should follow the given world
;; after the given key event.
;; STRATEGY: cases on KeyEvent kev
(define (world-after-key-event w kev)
  (cond
    [(new-cicle-key-event kev)
     (world-with-new-circle-added w)]

     [(new-cicle-key-event kev)
     (world-with-new-square-added w)]

     [else w]))
   
    

;; world-with-new-circle-added : World -> World
;; GIVEN: a world w
;; RETURNS: a world just like the given one, but with a new circle added
;; at the top center of the canvas
;; STRATEGY: use template for World on w
(define (world-with-new-circle-added w)
  (make-world
   (cons
    (make-node true
     (make-posn (/ CANVAS-WIDTH 2) 20) false empty empty empty)
    (world-listOfTree w))))

;; world-with-new-square-added : World -> World
;; GIVEN: a world w
;; RETURNS: a world just like the given one, but with a new square added
;; at the top center of the canvas
;; STRATEGY: use template for World on w
(define (world-with-new-square-added w)
  (make-world
   (cons
    (make-node false
     (make-posn (/ CANVAS-WIDTH 2) 20) false empty empty empty)
    (world-listOfTree w))))


;world-to-trees : World -> ListOfTree
;GIVEN: a World
;RETURNS: a list of all the trees in the given world.
(define (world-to-trees w)
  (world-listOfTree w))

;tree-to-root : Tree -> Node
;GIVEN: a tree
;RETURNS: the node at the root of the tree
;EXAMPLE: Consider the tree represented as follows:
;
;                 A
;                 |
;       +---+-----+-----+
;       |   |     |     |
;       B   C     D     E
;           |           |
;         +---+      +-----+
;         |   |      |     |
;         F   G      H     I
;
;If tree-to-root is given the subtree rooted at C, it should return the
;data structure associated with node C. This data structure may or may
;not include data associated with rest of the tree, depending on
;whether you have chosen to represent nodes differently from trees.
;
;
;tree-to-sons : Tree -> ListOfTree
;GIVEN: a tree
;RETURNS: the data associated with the immediate subtrees of the given
;tree. 
;EXAMPLE: In the situation above, if tree-to-sons is given the subtree
;rooted at C, it should return a list consisting of the subtree rooted
;at F and the subtree rooted at G.
;
;[Note how these examples are expressed.  They are not just tests, but
;are constructed to illuminate possible ambiguities or
;misunderstandings in the purpose statement.  This is what a good
;example does.]
;
;
;node-to-center : Node -> Posn
;RETURNS: the center of the given node as it is to be displayed on the
;scene.
;Note: this function returns a Posn (an ISL builtin).  This is for the
;convenience of the testing framework, and you may or may not wish to
;represent the center of the node in this way.
;
;node-to-selected? : Node -> Boolean
;RETURNS: true iff the given node is selected.