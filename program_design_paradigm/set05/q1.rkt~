;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname class-lists) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require rackunit)
(require "extras.rkt")
(require 2htdp/universe)
(require 2htdp/image)

(provide
	 make-slip
	 slip-color
	 slip-name1
	 slip-name2
	 felleisen-roster
	 shivers-roster
	 possible-roster?
	 acceptable-felleisen-answer?)

(define YELLOW "yellow")
(define BLUE "blue")

(define-struct slip (color name1 name2))
;; A Slip is a (make-slip Color String String)
;; A Color is one of which is either yellow to blue.
;; name1 and name2 are first and last names of students.

;; template:
;; slip-fn : Slip -> ??
;; (define (slip-fn s)
;; (... (slip-color s)
;;      (slip-name1 s)
;;      (slip-name2 s))


;;  A Color is one of
;; -- yellow
;; -- blue

;; template:
;; color-fn : Color -> ??
;; (define (color-fn c)
;; (cond
;;      (color-yellow c)
;;       (color-blue c)))

;; A ListOfSlip (LOS) is either
;; -- empty"
;; -- (cons Slip LOS)"

;; TEMPLATE
;; los-fn : LOS -> ??"
;; (define (los-fn los)"
;; (cond"
;;     [(empty? los) ...]"
;;     [else (..."
;;             (slip-fn (first los))"
;;             (los-fn (rest los)))]))"

;; DATA DEFINITIONS ENDS

;*******************************************************************

;;felleisen-roster : ListOfSlip -> ListOfSlip
;;GIVEN: a list of slips
;;RETURNS: a list of slips containing all the students in Professor
;;Felleisen's class, without duplication."
;;STRATEGY : Use template on LOS on lst
;;HALTING MEASURE : Length of lst
(define (felleisen-roster lst)
(cond
[(empty? lst) empty]
[else (if (is-valid-fellesien-record? (first lst) (rest lst))
      (cons (first lst) (felleisen-roster (rest lst)))
      (felleisen-roster (rest lst)))]))

;*******************************************************************


;; is-color-yellow? : Slip -> Boolean
;; GIVEN: A slip
;; RETURNS: a Boolean indicating whether the color of slip is yellow.
;; Example : (is-color-yellow? (make-slip \"blue\" \"ash\" \"b\")) -> False
;; STRATEGY : combine simpler functions
(define (is-color-yellow? s)
  (string=? (slip-color s) YELLOW))
  
;;test
(begin-for-test
  (check-equal? (is-color-yellow? (make-slip "yellow" "Wang" "Xi")) true))
;*******************************************************************
;; is-valid-fellesien-record? : Slip LOS -> Boolean
;; GIVEN: A slip and a list of slips.
;; RETURNS: It internally checks for the color
;; and whether the list suppiled has a duplicate and accordingly returns
;; a boolean.
;STRATEGY : combine simpler functions
(define (is-valid-fellesien-record? s lst)
(if (is-color-yellow? s)
    (if (is-duplicate-present s lst) false true) false))

;;test
(begin-for-test
  (check-equal? (is-valid-fellesien-record?
                 (make-slip "yellow" "Wang" "Xi")
                 (list
                 (make-slip "blue" "Jones" "Tom")
                 (make-slip "yellow" "Xi" "Wang")
                 (make-slip "yellow" "Shriram" "K."))) false))
;*******************************************************************
;;shivers-roster: ListOfSlip -> ListOfSlip
;;GIVEN: a list of slips
;;RETURNS: a list of slips containing all the students in Professor
;;Shivers' class, without duplication.
;;STRATEGY : Use template on LOS on lst
;;HALTING MEASURE : Length of lst
(define (shivers-roster lst)
(cond
[(empty? lst) empty]
[else (if (is-valid-shivers-record? (first lst) (rest lst))
      (cons (first lst) (shivers-roster (rest lst)))
       (shivers-roster (rest lst)))]))

(begin-for-test
  (check-equal? (shivers-roster
                (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "blue" "Jones" "Tom")
                 (make-slip "yellow" "Xi" "Wang")
                 (make-slip "yellow" "Shriram" "K.")))
                (list
                 (make-slip "blue" "Jones" "Tom"))))

;*******************************************************************
;; is-valid-shivers-record? : Slip LOS -> Boolean
;; GIVEN: A slip and a list of slips.
;; RETURNS: It internally checks for the color
;; and whether the list suppiled has a duplicate and accordingly returns
;; a boolean.
;; Example : see test cases.
;; STRATEGY : combine simpler functions
(define (is-valid-shivers-record? s lst)
(if (is-color-blue? s)
    (if (is-duplicate-present s lst) false true) false))
 
(begin-for-test
  (check-equal? (is-valid-shivers-record? (make-slip "blue" "Jones" "Tom")
                   (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "yellow" "Xi" "Wang")
                 (make-slip "blue" "Jones" "Tom")
                 (make-slip "yellow" "Shriram" "K."))) false))
                 
;*******************************************************************

;; is-color-blue? : Slip -> Boolean
;; GIVEN: A slip
;; RETURNS: a Boolean indicating whether the color of slip is yellow.
;; Example : (is-color-blue? (make-slip "blue" "ash" "b")) -> TRUE
;; STRATEGY : combine simpler functions
(define (is-color-blue? s)
  (string=? (slip-color s) BLUE))

;;test
(begin-for-test
  (check-equal? (is-color-blue? (make-slip "yellow" "Wang" "Xi")) false))

;*******************************************************************
;;is-duplicate-present: Slip ListOfSlip -> Boolean
;;GIVEN: a slip and a list of slips
;;RETURNS: true iff duplicate of given slip is present in the given list.
;;STRATEGY : Use template on LOS on lst
;;HALTING MEASURE : Length of lst
(define (is-duplicate-present s lst)
(cond
[(empty? lst) false]
[else (if (same-slip? s (first lst)) true
          (is-duplicate-present s (rest lst)))]))

;;test
(begin-for-test
  (check-equal? (is-duplicate-present (make-slip "blue" "Jones" "Tom")
                   (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "yellow" "Xi" "Wang")
                 (make-slip "blue" "Jones" "Tom")
                 (make-slip "yellow" "Shriram" "K."))) true))
  
;*******************************************************************

;;same-slip? Slip Slip -> Boolean
;;GIVEN: two slip object
;;RETURNS: true iff both contain same first and last name in any order.
;;STRATEGY : combine simpler functions

(define (same-slip? s s1)
  (or
   (and (string=? (slip-name1 s) (slip-name1 s1))
        (string=? (slip-name2 s) (slip-name2 s1)))
    (and (string=? (slip-name1 s) (slip-name2 s1))
        (string=? (slip-name2 s) (slip-name1 s1)))))

 ;;test
(begin-for-test
  (check-equal? (same-slip? (make-slip "blue" "Jones" "Tom")
                            (make-slip "blue" "Tom" "Jones")) true)) 
;*******************************************************************
  
;acceptable-felleisen-answer? : ListOfSlip ListOfSlip -> Boolean
;GIVEN: two lists of slips, lst1 and lst2
;RETURNS: true iff every student on a yellow slip in lst1 appears once
;and only once in lst2.
;STRATEGY : combine simpler functions.
(define (acceptable-felleisen-answer? lst1 lst2)
  (if (and (is-same-color-list? YELLOW lst2) (possible-roster? lst2))
      (contains-list (felleisen-roster lst1) lst2) false))

(begin-for-test
  (check-equal? (acceptable-felleisen-answer?
                (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "blue" "Jones" "Tom")
                 (make-slip "yellow" "Xi" "Wang")
                 (make-slip "yellow" "Shriram" "K."))

                (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "yellow" "Shriram" "K."))) true)

  (check-equal? (acceptable-felleisen-answer?
                (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "blue" "Jones" "Tom")
                 (make-slip "yellow" "Xi" "Wang")
                 (make-slip "yellow" "Shriram" "K."))

                (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "yellow" "Shriram" "K."))) false)

   (check-equal? (acceptable-felleisen-answer?
                (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "blue" "Jones" "Tom")
                 (make-slip "yellow" "Xi" "Wang")
                 (make-slip "yellow" "ash" "b")
                 (make-slip "yellow" "Shriram" "K."))

                (list
                 (make-slip "yellow" "Wang" "Xi")
                 (make-slip "yellow" "Shriram" "K."))) false))
;*******************************************************************"

;;contains-list: ListOfSlip  ListOfSlip -> Boolean
;;GIVEN: a two list of slips
;;RETURNS: true iff all elements of list1 are present in list2
;;STRATEGY : Use template on LOS on lst
;;HALTING MEASURE : Length of lst
(define (contains-list lst1 lst2)
(cond
[(empty? lst1) true]
[else (if (is-duplicate-present (first lst1) lst2)
      (contains-list (rest lst1) lst2) false)]))


(begin-for-test
  (check-equal?
   (contains-list (list
                      (make-slip "yellow" "Wang" "Xi")
                      (make-slip "yellow" "Shriram" "K."))
                  (list
                      (make-slip "yellow" "ash" "b")
                      (make-slip "yellow" "Wang" "Xi")
                      (make-slip "yellow" "Shriram" "K.")
                      )) true))


;*******************************************************************

;; possible-roster? : ListOfSlip -> Boolean
;; GIVEN: a list of slips
;; RETURNS: true iff all the slips in the list are the same color,
;; and no student is represented twice.
;; STRATEGY : combine simpler functions
(define (possible-roster? lst)
  (if (empty? lst) true
  (and (is-same-color-list? (slip-color (first lst)) (rest lst))
       (not (list-has-duplicates? lst)))))

;;test
(begin-for-test
  (check-equal?
   (possible-roster? empty) true))

(begin-for-test
  (check-equal?
   (possible-roster? (list
                      (make-slip "yellow" "Wang" "Xi")
                      (make-slip "blue" "Jones" "Tom")
                      (make-slip "yellow" "Xi" "Wang")
                      (make-slip "yellow" "Shriram" "K."))) false))

;*******************************************************************

;; is-same-color-list? : ListOfSlip -> Boolean
;; GIVEN: a list of slips
;; RETURNS: true iff same color slips are present in list.
;; EXAMPLES : see test cases
;; STRATEGY : Structural decomposition on lst : LOS
(define (is-same-color-list? color lst)
  (cond
    [(empty? lst) true]
    [else (if (string=? color (slip-color (first lst)))
          (is-same-color-list? color (rest lst)) false)])) 

(begin-for-test
  (check-equal?
   (is-same-color-list? "blue" (list
                      (make-slip "yellow" "Wang" "Xi")
                      (make-slip "blue" "Jones" "Tom")
                      (make-slip "yellow" "Xi" "Wang")
                      (make-slip "yellow" "Shriram" "K."))) false))
;*******************************************************************

;; list-has-duplicates? : ListOfSlip -> Boolean
;; GIVEN: a list of slips
;; RETURNS: true iff duplicates are present in list.
;; EXAMPLES : see test cases
;; STRATEGY : Structural decomposition on lst : LOS
(define (list-has-duplicates? lst)
 (cond
    [(empty? lst) false]
    [else (if (is-duplicate-present (first lst) (rest lst))
              true
              (list-has-duplicates? (rest lst)))]))

(begin-for-test
  (check-equal?
   (list-has-duplicates? (list
                      (make-slip "yellow" "Wang" "Xi")
                      (make-slip "blue" "Jones" "Tom")
                      (make-slip "yellow" "Xi" "Wang")
                      (make-slip "yellow" "Shriram" "K."))) true))

;*******************************************************************
              
















































