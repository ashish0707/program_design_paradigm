#lang racket
(require 2htdp/image)
(require 2htdp/universe)
(require "interfaces.rkt")
(require "HandleController.rkt")
(require rackunit)
(require "extras.rkt")


(provide XY-Controller%)

(define OUTER-CIRCLE (circle 10 "solid" "red"))
(define INNER-CIRCLE (circle 2 "solid" "black"))

;; The XY-Controller% class is a (new XY-Controller%)
;; INTERPRETATION:
;; A XY-Controller represents a XY-Controller% with below listed properties 

(define XY-Controller%
  (class* HandleController% (Controller<%>)

    (inherit-field    
     model       ;; represents model
     x           ;; x position of the center of the HandleController%
     y           ;; y position of the center of the HandleController%
     saved-mx    ;; the difference between mouse pointer and
                 ;; y-controller's  x-coordinates
     saved-my    ;; the difference between mouse pointer and
                 ;; y-controller's  y-coordinates
     
     handle-selected? ;; Boolean -- is the handle selected?
     handle-x-offset  ;; offset for displaying handle
     handle-y-offset  ;; offset for displaying handle
     handle-size      ;; size of the handle
     
     dot-x       ;; x position of the particle
     dot-y       ;; y position of the particle
     dot-vx      ;; x velocity of the particle
     dot-vy      ;; y velocity of the particle
     width       ;; width of the controller
     height      ;; height of the controller  
     half-width  ;; half width of the controller
     half-height ;; half height of the controller
     paused?)    ;; true iff simulation is halted
   
    (super-new)
 
    (send model register this)   

    (define/override (after-drag mx my)
      (cond
        [paused?
         (begin
           (send model execute-command
                 (make-set-position
                  (within-bounds? 1 (- mx saved-mx) 149) "x")) 
           (send model execute-command
                 (make-set-position
                  (within-bounds? 0 (- my saved-my) 99) "y")))]
        [handle-selected?
         (begin
           (set! x (- mx saved-mx))
           (set! y (- my saved-my)))]
        [else 1]))

    ;; within-bounds? : PosInt PosInt PosInt -> PosInt
    ;; GIVEN          : low and hign value along with actual value.
    ;; RETURNS        : max value between low and min value between
    ;;                  actual and high value.
    ;; STRATEGY       : combine simpler functions 
    (define (within-bounds? lo val hi)
      (max lo (min val hi)))


    ;; add-to-scene : Scene -> Scene
    ;; RETURNS  : a scene as given but with this wall painted
    ;;            on it.
    ;; STRATEGY : combine simpler funtions.
    (define/override (add-to-scene scene)
      (place-image (boundry-image) x y scene))

    ;; get-color : -> String
    ;; GIVEN    : no parameters
    ;; RETURNS  : a string value color depending on
    ;;            whether the handle is selected.
    ;; STRATEGY : Divide into Cases on handle-selected? 
    (define (get-color)
      (if handle-selected? "red" "black"))
    
    ;; assemble the image of the viewer
    
    ;; boundry-image : -> Scene
    ;; GIVEN    : no arguments
    ;; RETURNS  : scene with the y-controller image painted on it
    ;; STRATEGY : combine simpler functions
    (define (boundry-image)
      (let ((the-ball-image (ball-with-particle-image)))
        (overlay
         the-ball-image
         (rectangle width height "outline" "blue")
         (overlay/xy (square handle-size "outline" (get-color)) 0 0
                     (rectangle (+ width (* 2 handle-x-offset))
                                (+ height (* 2 handle-y-offset))
                                "outline" "black")))))

    
    ;; ball-with-particle-image : -> Scene
    ;; GIVEN    : no arguments
    ;; RETURNS  : scene with the data image painted on it
    ;; STRATEGY : combine simpler functions
    (define (ball-with-particle-image)
      (place-image (overlay INNER-CIRCLE
                            OUTER-CIRCLE)
                   dot-x dot-y 
                   (rectangle width height "outline" "blue")))
    


    ))

