#lang racket

(require 2htdp/image)
(require 2htdp/universe)
(require "interfaces.rkt")
(require "WidgetWorks.rkt")
(require "model.rkt")
(require "Y-Controller.rkt")
(require "X-Controller.rkt")
(require "XY-Controller.rkt")
(require "Position-Controller.rkt")
(require "VelocityController.rkt")

(require rackunit)
(require "extras.rkt")

(provide ControllerFactory%)
;; The ControllerFactory% class is a
;; (new ControllerFactory% [world World<%>][mod Model<%>])

(define ControllerFactory%
  (class* object% (SWidget<%>)

    (init-field world)  
    (init-field mod)   

    (super-new) 

    ;; after-key-event : KeyEvent -> Void
    ;; GIVEN    : a key event
    ;; EFFECT   : adds a controller in the world
    ;; STRATEGY : Divide into cases on kev.
    (define/public (after-key-event kev)
      (cond
        [(key=? kev "y") (add-controller Y-Controller%)]
        [(key=? kev "x") (add-controller X-Controller%)]
        [(key=? kev "z") (add-controller XY-Controller%)]
        [(key=? kev "v") (add-controller Velocity-Controller%)]
        [(key=? kev "p") (add-controller Position-Controller%)]))

    
    ;; add-controller : Controller% -> Void
    ;; GIVEN    : a contoller class reference.
    ;; EFFECT   : adds the given controller as a SWidget to world.
    ;; STRATEGY : combine simpler functions
    (define/public (add-controller cn-class)
      (send world add-widget (new cn-class [model mod])))

    ;; add-to-scene : Scene -> Scene
    ;; GIVEN    : a scene
    ;; RETURNS  : same scene
    ;; STRATEGY : combine simpler functions
    (define/public (add-to-scene s) s)

    ;; controller factory ignores these functions
    (define/public (after-tick) this)
    (define/public (after-drag mx my) this)
    (define/public (after-button-down mx my) this) 
    (define/public (after-button-up mx my) this)
    (define/public (after-move mx my) this)

    ))

